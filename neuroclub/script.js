// DOM Elements
const progressBar = document.getElementById('progressBar');
const floatingCTA = document.getElementById('floatingCTA');
const header = document.querySelector('.header');
const faqItems = document.querySelectorAll('.faq-item');
const tabBtns = document.querySelectorAll('.tab-btn');
const socialProof = document.getElementById('socialProof');
const priceCountdown = document.getElementById('price-countdown');
const calculateBtn = document.getElementById('calculate-btn');
const calculatorResults = document.getElementById('calculator-results');
const hourlyRateSlider = document.getElementById('hourly-rate');
const hourlyRateValue = document.getElementById('hourly-rate-value');
const businessSphere = document.getElementById('business-sphere');
const finalCtaForm = document.getElementById('final-cta-form');

// Calculator data for different business spheres
const calculatorData = {
    marketing: [
        { id: 'content-creation', label: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π', hours: 3 },
        { id: 'analytics', label: '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π', hours: 2 },
        { id: 'reporting', label: '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤', hours: 2.5 },
        { id: 'market-research', label: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤', hours: 4 },
        { id: 'email-campaigns', label: 'Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', hours: 1.5 }
    ],
    development: [
        { id: 'code-review', label: '–†–µ–≤—å—é –∫–æ–¥–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', hours: 2 },
        { id: 'testing', label: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π', hours: 3 },
        { id: 'debugging', label: '–ü–æ–∏—Å–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫', hours: 4 },
        { id: 'api-integration', label: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API', hours: 2.5 },
        { id: 'deployment', label: '–î–µ–ø–ª–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤', hours: 1.5 }
    ],
    sales: [
        { id: 'lead-generation', label: '–ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤', hours: 3 },
        { id: 'cold-outreach', label: '–•–æ–ª–æ–¥–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –∏ –ø–∏—Å—å–º–∞', hours: 4 },
        { id: 'proposal-writing', label: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', hours: 2 },
        { id: 'crm-management', label: '–í–µ–¥–µ–Ω–∏–µ CRM —Å–∏—Å—Ç–µ–º—ã', hours: 1.5 },
        { id: 'follow-up', label: '–°–ª–µ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –∏ –ø–∏—Å—å–º–∞', hours: 2.5 }
    ],
    design: [
        { id: 'concept-development', label: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –¥–∏–∑–∞–π–Ω–∞', hours: 3 },
        { id: 'mockup-creation', label: '–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫–µ—Ç–æ–≤', hours: 4 },
        { id: 'asset-optimization', label: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', hours: 2 },
        { id: 'brand-guidelines', label: '–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–±—É–∫–∞', hours: 6 },
        { id: 'ui-prototyping', label: '–ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤', hours: 3.5 }
    ],
    content: [
        { id: 'blog-writing', label: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –¥–ª—è –±–ª–æ–≥–∞', hours: 2.5 },
        { id: 'social-media', label: '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π', hours: 2 },
        { id: 'video-scripts', label: '–°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ', hours: 1.5 },
        { id: 'copywriting', label: '–†–µ–∫–ª–∞–º–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã', hours: 3 },
        { id: 'seo-content', label: 'SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç', hours: 3.5 }
    ]
};

// Social Proof Notifications Data
const notifications = [
    // –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    { 
        name: '–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞', 
        city: '–ú–æ—Å–∫–≤–∞',
        action: 'üí° –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü —Å–æ–∑–¥–∞–Ω –∑–∞ 15 –º–∏–Ω—É—Ç', 
        avatar: 'https://www.vokrug.tv/pic/person/c/0/a/5/c0a5cdb7c53cc2cd019e6b823f0ae6df.jpg',
        delay: 3000 
    },
    { 
        name: '–î–º–∏—Ç—Ä–∏–π –ü–µ—Ç—Ä–æ–≤', 
        city: '–°–ü–±',
        action: 'üéØ 50 —Å–∞–π—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —á–∞—Å', 
        avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 5000 
    },
    { 
        name: '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞', 
        city: '–ö–∞–∑–∞–Ω—å',
        action: 'üìä –ü–æ—Ä—Ç—Ä–µ—Ç –¶–ê –≥–æ—Ç–æ–≤ –∑–∞ 10 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 3 —á–∞—Å–æ–≤', 
        avatar: 'https://images.unsplash.com/photo-1487412720507-e7ab37603c6f?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 4000 
    },
    { 
        name: '–ú–∏—Ö–∞–∏–ª –í–æ–ª–∫–æ–≤', 
        city: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
        action: '‚úçÔ∏è 30 –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–∞–ø–∏—Å–∞–Ω—ã –∑–∞ –ø–æ–ª—á–∞—Å–∞', 
        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 6000 
    },
    
    // –î–∏–∑–∞–π–Ω –∏ –∫—Ä–µ–∞—Ç–∏–≤—ã
    { 
        name: '–°–æ—Ñ–∏—è –ò–≤–∞–Ω–æ–≤–∞', 
        city: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        action: 'üé® 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ª–æ–≥–æ—Ç–∏–ø–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –º–∏–Ω—É—Ç—É', 
        avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 4500 
    },
    { 
        name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –û—Ä–ª–æ–≤', 
        city: '–°–∞–º–∞—Ä–∞',
        action: 'üñº –†–µ–∫–ª–∞–º–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã –≥–æ—Ç–æ–≤—ã –±–µ–∑ –¥–∏–∑–∞–π–Ω–µ—Ä–∞', 
        avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 5500 
    },
    
    // –ü—Ä–æ–¥–∞–∂–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    { 
        name: '–ú–∞—Ä–∏–Ω–∞ –§–µ–¥–æ—Ä–æ–≤–∞', 
        city: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
        action: 'üí¨ –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∞–ø–∏—Å–∞–Ω –∑–∞ 5 –º–∏–Ω—É—Ç', 
        avatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 4000 
    },
    { 
        name: '–í–ª–∞–¥–∏–º–∏—Ä –ü–æ–ø–æ–≤', 
        city: '–í–æ—Ä–æ–Ω–µ–∂',
        action: 'üìß –°–æ—Å—Ç–∞–≤–∏–ª —Ç–µ–∫—Å—Ç Email-—Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ 1000 —á–µ–ª–æ–≤–µ–∫ –∑–∞ 10 –º–∏–Ω—É—Ç', 
        avatar: 'https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 5000 
    },
    { 
        name: '–û–ª—å–≥–∞ –ë–µ–ª–æ–≤–∞', 
        city: '–£—Ñ–∞',
        action: 'ü§ù –ö–ü –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –º–∏–Ω—É—Ç—É', 
        avatar: 'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 6000 
    },
    
    // –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    { 
        name: '–ò–≥–æ—Ä—å –ú–æ—Ä–æ–∑–æ–≤', 
        city: '–ß–µ–ª—è–±–∏–Ω—Å–∫',
        action: 'üíª –ë–∞–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ 2 –º–∏–Ω—É—Ç—ã —Å –ø–æ–º–æ—â—å—é AI', 
        avatar: 'https://images.unsplash.com/photo-1519085360753-af0119f7cbe7?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 3500 
    },
    { 
        name: '–ê–Ω–¥—Ä–µ–π –°–æ–∫–æ–ª–æ–≤', 
        city: '–û–º—Å–∫',
        action: '‚ö°Ô∏è –ö–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –≤ 3 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ', 
        avatar: 'https://images.unsplash.com/photo-1507591064344-4c6ce005b128?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 4500 
    },
    
    // –í–∏–¥–µ–æ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    { 
        name: '–¢–∞—Ç—å—è–Ω–∞ –õ–µ–±–µ–¥–µ–≤–∞', 
        city: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
        action: 'üé¨ –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–æ–ª–∏–∫–∞ –≥–æ—Ç–æ–≤ –∑–∞ 2 –º–∏–Ω—É—Ç—ã', 
        avatar: 'https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 5500 
    },
    { 
        name: '–†–æ–º–∞–Ω –ó–∞–π—Ü–µ–≤', 
        city: '–ü–µ—Ä–º—å',
        action: 'üìπ –ú–æ–Ω—Ç–∞–∂–Ω—ã–π –ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', 
        avatar: 'https://images.unsplash.com/photo-1506277886164-e25aa3f4ef7f?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 4000 
    },
    
    // E-commerce
    { 
        name: '–í–∏–∫—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤', 
        city: '–í–æ–ª–≥–æ–≥—Ä–∞–¥',
        action: 'üõç 50 —Ç–æ–≤–∞—Ä–æ–≤ –æ–ø–∏—Å–∞–Ω—ã –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∑–∞ —á–∞—Å', 
        avatar: 'https://images.unsplash.com/photo-1506919258185-6078bba55d2a?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 5000 
    },
    { 
        name: '–ú–∞–∫—Å–∏–º –ù–∏–∫–æ–ª–∞–µ–≤', 
        city: '–°–∞—Ä–∞—Ç–æ–≤',
        action: '‚≠êÔ∏è –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∑–∞ —Å–µ–∫—É–Ω–¥—ã', 
        avatar: 'https://cdn5.vedomosti.ru/image/2022/a5/xy3e4/original-17zu.jpg',
        delay: 4500 
    },
    
    // –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
    { 
        name: '–Æ–ª–∏—è –†–æ–º–∞–Ω–æ–≤–∞', 
        city: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
        action: 'üè† –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –∑–∞ 3 –º–∏–Ω—É—Ç—ã', 
        avatar: 'https://images.unsplash.com/photo-1488716820095-cbe80883c496?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 6000 
    },
    { 
        name: '–°–µ—Ä–≥–µ–π –í–æ—Ä–æ–±—å–µ–≤', 
        city: '–¢—é–º–µ–Ω—å',
        action: 'üìç –ê–Ω–∞–ª–∏–∑ —Ä–∞–π–æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ 5 –º–∏–Ω—É—Ç', 
        avatar: 'https://images.unsplash.com/photo-1556157382-97eda2d62296?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 3500 
    },
    
    // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
    { 
        name: '–ù–∞—Ç–∞–ª—å—è –ì—É—Å–µ–≤–∞', 
        city: '–ë–∞—Ä–Ω–∞—É–ª',
        action: '‚öñÔ∏è –î–æ–≥–æ–≤–æ—Ä —Å–æ—Å—Ç–∞–≤–ª–µ–Ω AI –∑–∞ 2 –º–∏–Ω—É—Ç—ã', 
        avatar: 'https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 5500 
    },
    { 
        name: '–ê—Ä—Ç–µ–º –ö–∏—Å–µ–ª–µ–≤', 
        city: '–ò—Ä–∫—É—Ç—Å–∫',
        action: 'üìÑ –®–∞–±–ª–æ–Ω –∏—Å–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', 
        avatar: 'https://images.unsplash.com/photo-1560250097-0b93528c311a?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 4000 
    },
    
    // –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
    { 
        name: '–î–µ–Ω–∏—Å –ú–∞–∫–∞—Ä–æ–≤', 
        city: '–•–∞–±–∞—Ä–æ–≤—Å–∫',
        action: 'üèó –°–º–µ—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫ –∑–∞ 10 –º–∏–Ω—É—Ç', 
        avatar: 'https://images.unsplash.com/photo-1492562080023-ab3db95bfbce?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 4500 
    },
    { 
        name: '–ê–ª–∏–Ω–∞ –ñ—É–∫–æ–≤–∞', 
        city: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
        action: 'üìê –ü—Ä–æ–µ–∫—Ç –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ —á–∞—Å', 
        avatar: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 5000 
    },
    
    // –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    { 
        name: '–ü–∞–≤–µ–ª –¢–∏—Ç–æ–≤', 
        city: '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
        action: 'üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –Ω–∞ —Å–∞–π—Ç–µ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 35% —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏', 
        avatar: 'https://images.unsplash.com/photo-1599566150163-29194dcaad36?w=150&h=150&fit=crop&crop=face&auto=format',
        delay: 5000 
    }
];

// Progress Bar
function updateProgressBar() {
    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight - windowHeight;
    const scrolled = window.scrollY;
    const progress = (scrolled / documentHeight) * 100;
    progressBar.style.width = `${progress}%`;
}

// Floating CTA Button
function toggleFloatingCTA() {
    const scrolled = window.scrollY;
    if (scrolled > 800) {
        floatingCTA.classList.add('visible');
    } else {
        floatingCTA.classList.remove('visible');
    }
}

// Header Scroll Effect
function handleHeaderScroll() {
    const scrolled = window.scrollY;
    if (scrolled > 50) {
        header.classList.add('scrolled');
    } else {
        header.classList.remove('scrolled');
    }
}

// Smooth Scroll for Anchor Links
function initSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;
            
            const targetSection = document.querySelector(targetId);
            if (targetSection) {
                const headerOffset = 80;
                const elementPosition = targetSection.getBoundingClientRect().top;
                const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

                window.scrollTo({
                    top: offsetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// FAQ Accordion
function initFAQ() {
    faqItems.forEach(item => {
        const question = item.querySelector('.faq-question');
        question.addEventListener('click', () => {
            const isActive = item.classList.contains('active');
            
            // Close all items
            faqItems.forEach(faqItem => {
                faqItem.classList.remove('active');
            });
            
            // Open clicked item if it wasn't active
            if (!isActive) {
                item.classList.add('active');
            }
        });
    });
}

// Tabs Navigation
function initTabs() {
    tabBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const tabId = btn.dataset.tab;
            
            // Remove active class from all buttons and panes
            tabBtns.forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.classList.remove('active');
            });
            
            // Add active class to clicked button and corresponding pane
            btn.classList.add('active');
            const targetPane = document.querySelector(`[data-content="${tabId}"]`);
            if (targetPane) {
                targetPane.classList.add('active');
            }
        });
    });
}

// Calculator Functionality
function initCalculator() {
    // Check if all required elements exist
    const requiredElements = {
        'businessSphere': businessSphere,
        'hourlyRateSlider': hourlyRateSlider,
        'hourlyRateValue': hourlyRateValue,
        'calculateBtn': calculateBtn,
        'calculatorResults': calculatorResults
    };
    
    const missingElements = [];
    for (const [name, element] of Object.entries(requiredElements)) {
        if (!element) {
            missingElements.push(name);
        }
    }
    
    if (missingElements.length > 0) {
        console.warn('Missing calculator elements:', missingElements);
        showErrorMessage(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
        return;
    }

    // Update hourly rate display
    hourlyRateSlider.addEventListener('input', (e) => {
        hourlyRateValue.textContent = e.target.value;
    });
    
    // Load tasks when sphere is selected
    businessSphere.addEventListener('change', (e) => {
        loadTasksForSphere(e.target.value);
    });
    
    // Calculate button click
    calculateBtn.addEventListener('click', () => {
        calculateSavings();
    });
    
    console.log('‚úÖ Calculator initialized successfully');
}

function loadTasksForSphere(sphere) {
    const tasksGroup = document.getElementById('tasks-group');
    if (!tasksGroup || !sphere) {
        tasksGroup.innerHTML = '';
        return;
    }
    
    const tasks = calculatorData[sphere] || [];
    
    tasksGroup.innerHTML = tasks.map(task => `
        <div class="checkbox">
            <input type="checkbox" id="${task.id}" data-hours="${task.hours}">
            <div class="checkbox__box"></div>
            <label for="${task.id}" class="checkbox__label">
                ${task.label} <span style="color: var(--text-tertiary);">(~${task.hours}—á/–¥–µ–Ω—å)</span>
            </label>
        </div>
    `).join('');
}

function calculateSavings() {
    const hourlyRate = parseInt(hourlyRateSlider.value);
    const selectedTasks = document.querySelectorAll('.checkbox input:checked');
    
    console.log('üî¢ Calculating savings:', { 
        hourlyRate, 
        selectedTasksCount: selectedTasks.length, 
        businessSphere: businessSphere.value 
    });
    
    if (selectedTasks.length === 0 || !businessSphere.value) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É');
        return;
    }
    
    // Hide time usage ideas block if it was shown from previous calculation
    const timeUsageIdeas = document.getElementById('time-usage-ideas');
    if (timeUsageIdeas) {
        timeUsageIdeas.classList.remove('visible');
        timeUsageIdeas.style.display = 'none';
    }
    
    // Calculate total hours saved per day
    let totalHoursSaved = 0;
    selectedTasks.forEach(task => {
        const hours = parseFloat(task.dataset.hours);
        totalHoursSaved += hours * 0.7; // AI saves 70% of time
        console.log(`Task: ${task.id}, Hours: ${hours}, Saved: ${hours * 0.7}`);
    });
    
    // Calculate 3-month savings (instead of monthly)
    const workDaysPerMonth = 22;
    const monthsCount = 3;
    const totalWorkDays = workDaysPerMonth * monthsCount;
    const totalHoursSaved3Months = totalHoursSaved * totalWorkDays;
    const totalMoneySaved = totalHoursSaved3Months * hourlyRate;
    const daysSaved = Math.floor(totalHoursSaved3Months / 8);
    const additionalIncome = totalMoneySaved * 0.5; // Potential additional income from freed time
    
    // ROI calculation (course price is 18,900‚ÇΩ)
    const coursePrice = 18900;
    const roiPercentage = Math.floor((totalMoneySaved / coursePrice) * 100);
    const paybackDays = Math.ceil(coursePrice / (totalMoneySaved / (monthsCount * 30)));
    
    console.log('üìä Calculation results:', {
        totalHoursSaved3Months: Math.floor(totalHoursSaved3Months),
        totalMoneySaved: Math.floor(totalMoneySaved),
        daysSaved,
        additionalIncome: Math.floor(additionalIncome),
        roiPercentage,
        paybackDays
    });
    
    // Update results
    updateElementText('time-saved-3months', Math.floor(totalHoursSaved3Months));
    updateElementText('days-saved', daysSaved);
    updateElementText('money-saved', formatNumber(Math.floor(totalMoneySaved)));
    updateElementText('additional-income', formatNumber(Math.floor(additionalIncome)));
    updateElementText('roi-percentage', roiPercentage);
    updateElementText('payback-days', paybackDays);
    
    // Update hours in time usage ideas block
    updateElementText('hours-per-month', Math.floor(totalHoursSaved * workDaysPerMonth));
    
    // Show results with animation
    calculatorResults.classList.add('visible');
    calculatorResults.style.display = 'block';
    
    console.log('‚úÖ Results displayed successfully');
    
    // Show time usage ideas block with delay
    setTimeout(() => {
        if (timeUsageIdeas) {
            timeUsageIdeas.style.display = 'block';
            // Force reflow to ensure the display change is applied before animation
            timeUsageIdeas.offsetHeight;
            
            setTimeout(() => {
                timeUsageIdeas.classList.add('visible');
                console.log('‚úÖ Time usage ideas shown');
            }, 50);
        }
    }, 500);
    
    // Animate value cards one by one
    const valueCards = document.querySelectorAll('.value-card');
    valueCards.forEach((card, index) => {
        setTimeout(() => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            card.style.transition = 'all 0.5s ease';
            
            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, 100);
        }, 700 + (index * 100));
    });
    
    // Scroll to results
    setTimeout(() => {
        calculatorResults.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }, 300);
}

// Helper function to safely update element text
function updateElementText(elementId, value) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = value;
        console.log(`‚úÖ Updated ${elementId}: ${value}`);
    } else {
        console.warn(`‚ùå Element with id '${elementId}' not found`);
    }
}

// Test function for calculator (for debugging)
function testCalculator() {
    console.log('üß™ Testing calculator elements...');
    
    const testElements = [
        'business-sphere',
        'tasks-group', 
        'hourly-rate',
        'hourly-rate-value',
        'calculate-btn',
        'calculator-results',
        'time-saved-3months',
        'days-saved',
        'money-saved',
        'additional-income',
        'roi-percentage',
        'payback-days',
        'hours-per-month'
    ];
    
    const missing = [];
    testElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            console.log(`‚úÖ Found: ${id}`);
        } else {
            console.warn(`‚ùå Missing: ${id}`);
            missing.push(id);
        }
    });
    
    if (missing.length === 0) {
        console.log('üéâ All calculator elements found!');
        return true;
    } else {
        console.error(`‚ùå Missing elements: ${missing.join(', ')}`);
        return false;
    }
}

// Test function for social proof notifications
function testSocialProof() {
    console.log('üîî Testing social proof system...');
    
    if (!socialProof) {
        console.error('‚ùå Social proof element not found');
        return;
    }
    
    console.log('‚úÖ Social proof element found');
    console.log(`üìä Total notifications: ${notifications.length}`);
    
    // Force show a notification immediately
    const randomNotification = notifications[Math.floor(Math.random() * notifications.length)];
    console.log('üöÄ Forcing notification display:', randomNotification.name);
    
    const textElement = socialProof.querySelector('.social-proof__text');
    const avatarElement = socialProof.querySelector('.social-proof__avatar');
    
    if (textElement && avatarElement) {
        textElement.innerHTML = `
            <strong>${randomNotification.name} –∏–∑ –≥. ${randomNotification.city}</strong>
            <span>${randomNotification.action}</span>
        `;
        
        avatarElement.src = randomNotification.avatar;
        avatarElement.alt = randomNotification.name;
        
        socialProof.classList.add('show');
        
        setTimeout(() => {
            socialProof.classList.remove('show');
        }, 6000);
        
        console.log('‚úÖ Test notification displayed successfully!');
    } else {
        console.error('‚ùå Social proof text or avatar element not found');
    }
}

// Global test function to call from console
window.testNotifications = testSocialProof;
window.testCalc = testCalculator;

// Helper function to show error messages
function showErrorMessage(message) {
    console.error('‚ùå Error:', message);
    
    // Create or update notification
    let notification = document.querySelector('.error-notification');
    if (!notification) {
        notification = document.createElement('div');
        notification.className = 'error-notification';
        document.body.appendChild(notification);
    }
    
    notification.innerHTML = `
        <div class="notification-content">
            <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
            </svg>
            <span>${message}</span>
        </div>
    `;
    
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 5000);
}

// Format numbers with spaces
function formatNumber(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
}

// Countdown Timer
function initCountdown() {
    // Set target date (2 days from now)
    const targetDate = new Date();
    targetDate.setDate(targetDate.getDate() + 2);
    targetDate.setHours(14, 23, 45);
    
    function updateCountdown() {
        const now = new Date();
        const difference = targetDate - now;
        
        if (difference > 0) {
            const days = Math.floor(difference / (1000 * 60 * 60 * 24));
            const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((difference % (1000 * 60)) / 1000);
            
            const countdownText = `${days} ${getDayWord(days)} ${hours}:${padZero(minutes)}:${padZero(seconds)}`;
            priceCountdown.textContent = countdownText;
        } else {
            priceCountdown.textContent = '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!';
        }
    }
    
    function getDayWord(days) {
        if (days === 1) return '–¥–µ–Ω—å';
        if (days >= 2 && days <= 4) return '–¥–Ω—è';
        return '–¥–Ω–µ–π';
    }
    
    function padZero(num) {
        return num < 10 ? '0' + num : num;
    }
    
    updateCountdown();
    setInterval(updateCountdown, 1000);
}

// Social Proof Notifications
function initSocialProof() {
    let currentIndex = 0;
    
    function showNotification() {
        if (!socialProof) return;
        
        const notification = notifications[currentIndex];
        const textElement = socialProof.querySelector('.social-proof__text');
        const avatarElement = socialProof.querySelector('.social-proof__avatar');
        
        textElement.innerHTML = `
            <strong>${notification.name} –∏–∑ –≥. ${notification.city}</strong>
            <span>${notification.action}</span>
        `;
        
        if (avatarElement) {
            avatarElement.src = notification.avatar;
            avatarElement.alt = notification.name;
            avatarElement.style.borderRadius = '50%';
            avatarElement.style.objectFit = 'cover';
        }
        
        socialProof.classList.add('show');
        
        setTimeout(() => {
            socialProof.classList.remove('show');
        }, notification.delay || 5000);
        
        currentIndex = (currentIndex + 1) % notifications.length;
    }
    
    // Start showing notifications after 8 seconds
    setTimeout(() => {
        showNotification();
        // Show next notification every 15 seconds (fixed interval)
        setInterval(() => {
            showNotification();
        }, 15000);
    }, 8000);
    
    // Close button
    const closeBtn = socialProof?.querySelector('.social-proof__close');
    if (closeBtn) {
        closeBtn.addEventListener('click', () => {
            socialProof.classList.remove('show');
        });
    }
}

// Testimonials Slider
function initTestimonialsSlider() {
    const prevBtn = document.querySelector('.slider-prev');
    const nextBtn = document.querySelector('.slider-next');
    const dots = document.querySelectorAll('.dot');
    const testimonials = document.querySelectorAll('.testimonial-card');
    let currentSlide = 0;
    
    function showSlide(index) {
        testimonials.forEach((testimonial, i) => {
            if (window.innerWidth <= 768) {
                testimonial.style.display = i === index ? 'block' : 'none';
            } else {
                testimonial.style.display = 'block';
            }
        });
        
        dots.forEach((dot, i) => {
            dot.classList.toggle('active', i === index);
        });
    }
    
    prevBtn.addEventListener('click', () => {
        currentSlide = (currentSlide - 1 + testimonials.length) % testimonials.length;
        showSlide(currentSlide);
    });
    
    nextBtn.addEventListener('click', () => {
        currentSlide = (currentSlide + 1) % testimonials.length;
        showSlide(currentSlide);
    });
    
    dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
            currentSlide = index;
            showSlide(currentSlide);
        });
    });
    
    // Initialize
    showSlide(currentSlide);
    
    // Auto-play
    setInterval(() => {
        if (window.innerWidth <= 768) {
            currentSlide = (currentSlide + 1) % testimonials.length;
            showSlide(currentSlide);
        }
    }, 5000);
}

// Intersection Observer for Animations
function initScrollAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -100px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);
    
    // Observe all sections
    const sections = document.querySelectorAll('section');
    sections.forEach(section => {
        section.style.opacity = '0';
        section.style.transform = 'translateY(30px)';
        section.style.transition = 'all 0.6s ease';
        observer.observe(section);
    });
}

// Mobile Menu Toggle
function initMobileMenu() {
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    const nav = document.querySelector('.nav');
    const navLinks = document.querySelectorAll('.nav__link');
    
    if (mobileMenuToggle) {
        // Toggle menu on burger click
        mobileMenuToggle.addEventListener('click', () => {
            nav.classList.toggle('mobile-active');
            mobileMenuToggle.classList.toggle('active');
        });
        
        // Close menu when clicking on navigation links
        navLinks.forEach(link => {
            link.addEventListener('click', () => {
                nav.classList.remove('mobile-active');
                mobileMenuToggle.classList.remove('active');
            });
        });
        
        // Close menu when clicking on overlay
        nav.addEventListener('click', (e) => {
            if (e.target === nav) {
                nav.classList.remove('mobile-active');
                mobileMenuToggle.classList.remove('active');
            }
        });
    }
}

// CTA Button Actions
function initCTAActions() {
    const ctaButtons = document.querySelectorAll('.btn--primary');
    
    ctaButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
            // Skip if it's a form submit button
            if (btn.type === 'submit') return;
            
            e.preventDefault();
            // Scroll to final CTA form
            const finalCTA = document.getElementById('final-cta');
            if (finalCTA) {
                finalCTA.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // Focus on first input after scroll
                setTimeout(() => {
                    const firstInput = finalCTA.querySelector('input');
                    if (firstInput) firstInput.focus();
                }, 1000);
            }
        });
    });
    
    // Floating CTA specific action
    floatingCTA.addEventListener('click', () => {
        const finalCTA = document.getElementById('final-cta');
        if (finalCTA) {
            finalCTA.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    });
}

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Test calculator elements first
    console.log('üöÄ Initializing NeuroClub website...');
    
    const calculatorTestPassed = testCalculator();
    if (!calculatorTestPassed) {
        showErrorMessage('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
    
    initSmoothScroll();
    initFAQ();
    initTabs();
    initCalculator();
    initCountdown();
    initSocialProof();
    initTestimonialsSlider();
    initScrollAnimations();
    initMobileMenu();
    initCTAActions();
    
    console.log('‚úÖ Website initialization complete');
});

// Window scroll events
window.addEventListener('scroll', () => {
    updateProgressBar();
    toggleFloatingCTA();
    handleHeaderScroll();
});

// Window resize events
let resizeTimer;
window.addEventListener('resize', () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
        // Reinitialize testimonials slider on resize
        initTestimonialsSlider();
    }, 250);
}); 